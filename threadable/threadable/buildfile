intf_libs = # Interface dependencies.
impl_libs = # Implementation dependencies.
#import xxxx_libs += libhello%lib{hello}

switch $cxx.id: regex.match
{
  case 'gcc' | 'clang'
  {
    import intf_libs += libtbb%lib{tbb}
  }
  case 'clang-apple'
  {
    import intf_libs += libtbb%lib{tbb}
    import intf_libs += pstld%lib{pstld}
    cxx.export.poptions += -DPSTLD_HACK_INTO_STD
  }
}
switch $cxx.target.system
{
  case 'linux' | 'bsd' | 'darwin'
  {
    cxx.libs += -lpthread
    cxx.export.libs += -lpthread
  }
}

lib{threadable}: {hxx ixx txx cxx}{** -version} hxx{version} $impl_libs $intf_libs

# Include the generated version header into the distribution (so that we don't
# pick up an installed one) and don't remove it when cleaning in src (so that
# clean results in a state identical to distributed).
#
hxx{version}: in{version} $src_root/manifest
{
  dist  = true
  clean = ($src_root != $out_root)
}

hxx{export}@./: cxx.importable = false

# Build options.
#
cxx.poptions =+ "-I$out_root" "-I$src_root"

{hbmia obja}{*}: cxx.poptions += -DTHREADABLE_STATIC_BUILD
{hbmis objs}{*}: cxx.poptions += -DTHREADABLE_SHARED_BUILD

# Export options.
#
lib{threadable}:
{
  cxx.export.poptions += "-I$out_root" "-I$src_root"
  cxx.export.libs += $intf_libs
}

liba{threadable}: cxx.export.poptions += -DTHREADABLE_STATIC
libs{threadable}: cxx.export.poptions += -DTHREADABLE_SHARED

# For pre-releases use the complete version to make sure they cannot be used
# in place of another pre-release or the final version. See the version module
# for details on the version.* variable values.
#
if $version.pre_release
  lib{threadable}: bin.lib.version = "-$version.project_id"
else
  lib{threadable}: bin.lib.version = "-$version.major.$version.minor"

# Install into the threadable/ subdirectory of, say, /usr/include/
# recreating subdirectories.
#
{hxx ixx txx}{*}:
{
  install         = include/threadable/
  install.subdirs = true
}
