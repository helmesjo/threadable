intf_libs = # Interface dependencies.
impl_libs = # Implementation dependencies.
import test_libs += doctest%lib{doctest}
import benchmark_libs += google-benchmark%lib{benchmark}

./: lib{threadable}: {hxx ixx txx cxx}{** -version -**.test... -**.benchmark... -doctest*} \
  hxx{version} $impl_libs $intf_libs

switch $cxx.target.class, $cxx.target.system
{
  case 'linux' | 'bsd' | 'macos'
    cxx.libs += -lpthread
}

# Unit tests.
#

# Create precompiled doctest_main lib
libue{doctest_main}: cxx{doctest_define_main} $test_libs
{
  install = false
}

exe{*.test}:
{
  test = true
  install = false
  test.arguments = --no-intro
}

for t: cxx{**.test...}
{
  d = $directory($t)
  n = $name($t)...

  $d/exe{$n}: $t $d/{hxx ixx txx}{+$n} hxx{doctest_include} $d/testscript{+$n}
  $d/exe{$n}: libue{doctest_main} lib{threadable}: bin.whole = false

  switch $cxx.id
  {
    case 'gcc' | 'clang' | 'clang-apple' | 'clang-emscripten'
    {
      obj{$n}:
      {
        # Ignore warning caused by doctest 'parameterized tests'
        cxx.coptions += -Wno-unused-local-typedefs
      }
    }
  }
}

# Benchmarks.
#
if $(config.$(project).benchmarks)
{
  exe{*.benchmark}:
  {
    test = true
    install = false
  }

  for t: cxx{**.benchmark...}
  {
    d = $directory($t)
    n = $name($t)...

    $d/exe{$n}: $t $d/{hxx ixx txx}{+$n} $d/testscript{+$n}
    $d/exe{$n}: $benchmark_libs lib{threadable}: bin.whole = false
  }
}

# Include the generated version header into the distribution (so that we don't
# pick up an installed one) and don't remove it when cleaning in src (so that
# clean results in a state identical to distributed).
#
hxx{version}: in{version} $src_root/manifest
{
  dist  = true
  clean = ($src_root != $out_root)
}

hxx{export}@./: cxx.importable = false

# Build options.
#
cxx.poptions =+ "-I$out_root" "-I$src_root"

{hbmia obja}{*}: cxx.poptions += -DTHREADABLE_STATIC_BUILD
{hbmis objs}{*}: cxx.poptions += -DTHREADABLE_SHARED_BUILD

# Export options.
#
lib{threadable}:
{
  cxx.export.poptions = "-I$out_root" "-I$src_root"
  cxx.export.libs = $intf_libs
}

liba{threadable}: cxx.export.poptions += -DTHREADABLE_STATIC
libs{threadable}: cxx.export.poptions += -DTHREADABLE_SHARED

# For pre-releases use the complete version to make sure they cannot be used
# in place of another pre-release or the final version. See the version module
# for details on the version.* variable values.
#
if $version.pre_release
  lib{threadable}: bin.lib.version = "-$version.project_id"
else
  lib{threadable}: bin.lib.version = "-$version.major.$version.minor"

# Install into the threadable/ subdirectory of, say, /usr/include/
# recreating subdirectories.
#
{hxx ixx txx}{*}:
{
  install         = include/threadable/
  install.subdirs = true
}
