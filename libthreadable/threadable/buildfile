intf_libs = # Interface dependencies.
impl_libs = # Implementation dependencies.

lib{threadable}: libul{threadable}: {hxx ixx txx cxx}{** -version} hxx{version} $impl_libs $intf_libs

switch $cxx.stdlib: path.match, $cxx.id: path.match, $cxx.target.class: regex.match
{
  case 'libc++', 'clang*', 'macos'
  {
    import intf_libs += libpstld%lib{pstld}
    libul{threadable}: $intf_libs

    lib{threadable}:
    {
      cxx.poptions += -I/opt/homebrew/include -DPSTLD_HACK_INTO_STD
      cxx.loptions += -L/opt/homebrew/lib
      cxx.export.poptions += -DPSTLD_HACK_INTO_STD
    }
  }
  case '*', '*', 'macos'
  {
    lib{threadable}:
    {
      cxx.libs += -ltbb
      cxx.poptions += -I/opt/homebrew/include
      cxx.loptions += -L/opt/homebrew/lib
      cxx.export.libs += -ltbb
    }
  }
  case '*', '*', '^(?!windows$).*'
  {
    lib{threadable}:
    {
      cxx.libs += -ltbb
      cxx.poptions += -I/usr/include
      cxx.loptions += -L/usr/lib
      cxx.export.libs += -ltbb
    }
  }
}

# Include the generated version header into the distribution (so that we don't
# pick up an installed one) and don't remove it when cleaning in src (so that
# clean results in a state identical to distributed).
#
hxx{version}: in{version} $src_root/manifest
{
  dist  = true
  clean = ($src_root != $out_root)
}

# Build options.
#
cxx.poptions =+ "-I$out_root" "-I$src_root"

# Export options.
libs{threadable}: def{threadable}: include = ($cxx.target.system == 'win32-msvc')
def{threadable}: libul{threadable}

if ($cxx.target.system == 'mingw32')
  cxx.loptions += -Wl,--export-all-symbols

lib{threadable}:
{
  cxx.export.poptions += "-I$out_root" "-I$src_root"
  cxx.export.libs += $intf_libs
}

# For pre-releases use the complete version to make sure they cannot be used
# in place of another pre-release or the final version. See the version module
# for details on the version.* variable values.
#
if $version.pre_release
  lib{threadable}: bin.lib.version = "-$version.project_id"
else
  lib{threadable}: bin.lib.version = "-$version.major.$version.minor"

# Install into the threadable/ subdirectory of, say, /usr/include/
# recreating subdirectories.
#
{hxx ixx txx}{*}:
{
  install         = include/threadable/
  install.subdirs = true
}
